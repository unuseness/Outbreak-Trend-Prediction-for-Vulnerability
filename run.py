# -*- coding: UTF-8 -*-
# @Time : 2022/9/22 10:07
# @File : run.py

import pandas as pd
import scipy
import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pylab as plt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import r2_score

from eemd import Signal
from ARMA import imf_arma,residual_arma
from createCsv import createCsv

# ignore FutureWarning
import warnings
warnings.filterwarnings('ignore')

def initial_sequence():

    # load initial data
    df = pd.read_csv('vulnerability.csv', encoding='utf-8')
    initialArr = list(df['numbers'])
    imf_fit(initialArr)


def imf_fit(raw):
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)
    data_len = E_imfs.shape[0] # numbers of imfs

    # print(E_imfs)

    # residual = smoothArr - np.sum(E_imfs[:], axis=0)

    # rs_add = []
    # rs_add.append(list(residual))
    # print(rs_add)
    # # print(rs_add)
    # # E_imfs.insert(residual,7)
    # pca = PCA(n_components=7)
    # E_imfs_rs = np.r_[E_imfs, rs_add]
    # pca.fit(E_imfs.T)
    # print(pca.explained_variance_)
    # print(pca.explained_variance_ratio_)
    # print(sum(pca.explained_variance_ratio_))

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 5, 3, "high_frequence.csv"))
    imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 1, 3, 1, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 4, 0, "residual.csv"))

    # fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 0, 9, "imf0.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 4, 3, "imf1.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 4, 5, "imf2.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[3], 0, 1, 0, "imf3.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[4], 2, 2, 2, "imf4.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[5], 3, 2, 0, "imf5.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[6], 0, 1, 0, "imf6.csv"))

    # use arma(p, q) forecast imf component
    # imf_arma(E_imfs[0], 0, 0, 9)
    # imf_arma(E_imfs[1], 0, 4, 3)
    # imf_arma(E_imfs[2], 0, 4, 5)
    # imf_arma(E_imfs[3], 0, 1, 0)
    # imf_arma(E_imfs[4], 2, 2, 2)
    # imf_arma(E_imfs[5], 3, 2, 0)
    # imf_arma(E_imfs[6], 0, 1, 0)

    # use arma(p,q) forecast residual
    # residue = smoothArr - np.sum(E_imfs[:], axis=0) # gain residual
    # residual_arma(residue, 4, 0)

    Smooth = pd.Series(smoothArr, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # createCsv(Smooth.dropna(how=any), 'Smooth.csv')
    # createCsv(fin_predict.dropna(how=any), 'advanced_result.csv')
    # createCsv(fin_predict.dropna(how=any), 'model_advanced_result.csv')

    raw = pd.Series(raw, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    plt.figure(figsize=(10, 8))
    plt.plot(Smooth.iloc[:], color='g', label='Smooth')
    plt.plot(pd.Series(raw).iloc[:], color='b', label='Actual')
    plt.plot(fin_predict.iloc[:], color='r', linestyle='--', label='predict')
    plt.xlabel('date')
    plt.ylabel('vulnerable numbers')
    plt.legend(loc='best')
    plt.show()

    print(np.sum(Smooth[-12:], axis=0))
    print(np.sum(fin_predict[-12:], axis=0))
    # print('Smooth_RMSE: %.4f'% np.sqrt(sum((Smooth[-12:]-raw[-12:])**2)/12))
    # print('Predict_RMSE: %.4f'% np.sqrt(sum((fin_predict[-12:] - raw[-12:]) ** 2) / 12))
    # print('Predict_Smooth: %.4f'% np.sqrt(sum((fin_predict[-12:] - Smooth[-12:]) ** 2) / 12))

    print('Smooth_MAE: %.4f' % mean_absolute_error(raw[-12:], Smooth[-12:]))
    print('Smooth_MAPE: %.4f' % mean_absolute_percentage_error(raw[-12:], Smooth[-12:]))
    print('Smooth_R2: %.4f' % r2_score(raw[-12:], Smooth[-12:]))

    print('Smooth_pre_MAE: %.4f' % mean_absolute_error(Smooth[-12:], fin_predict[-12:]))
    print('Smooth_pre_MAPE: %.4f' % mean_absolute_percentage_error(Smooth[-12:], fin_predict[-12:]))
    print('Smooth_pre_R2: %.4f' % r2_score(Smooth[-12:], fin_predict[-12:]))

    print('MAE: %.4f'% mean_absolute_error(raw[-12:], fin_predict[-12:]))
    print('MAPE: %.4f' % mean_absolute_percentage_error(raw[-12:], fin_predict[-12:]))
    print('R2: %.4f'% r2_score(raw[-12:], fin_predict[-12:]))


if __name__ == "__main__":

    initial_sequence()

