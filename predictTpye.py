# -*- coding: UTF-8 -*-
# @Time : 2022/10/9 10:57
# @File : predictTpye.py

import pandas as pd
import scipy
import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pylab as plt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import r2_score

from eemd import Signal
from ARMA import imf_arma,residual_arma
from createCsv import createCsv

# ignore FutureWarning
import warnings
warnings.filterwarnings('ignore')

def type_sequence():
    # load initial data
    df = pd.read_csv('VulTypeNums.csv', encoding='utf-8')
    # predict other
    OtherArr = list(df['Other'])
    other_type(OtherArr)

    # predict memory destruction
    # MemoryArr = list(df['Memory destruction'])
    # memory_type(MemoryArr)

    # predict logic error
    # LogicArr = list(df['Logic error'])
    # logic_type(LogicArr)

    # predict Input validation
    # InputArr = list(df['Input validation'])
    # Input_type(InputArr)

    # predict Design error
    # DesignArr = list(df['Design error'])
    # Design_type(DesignArr)

    # predict Configuration error
    # ConfigureArr = list(df['Configuration error'])
    # Configuration_type(ConfigureArr)

def other_type(raw):
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    # imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 4, 5, "high_frequence.csv"))
    # imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 1, 5, 5, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))

    fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 3, 5, "imf0.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 3, 1, "imf1.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 4, 2, "imf2.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[3], 0, 1, 0, "imf3.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[4], 2, 2, 4, "imf4.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[5], 2, 3, 1, "imf5.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[6], 3, 1, 0, "imf6.csv"))

    plot_print(fin_predict, smoothArr, raw)

def memory_type(raw):
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 3, 1, "high_frequence.csv"))
    imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5), 1, 5, 5, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))


    # fin_predict = fin_predict.add(imf_arma(E_imfs[0], 1, 1, 1, "imf0.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 5, 3, "imf1.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 4, 1, "imf2.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[3], 0, 5, 1, "imf3.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[4], 2, 2, 4, "imf4.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[5], 2, 1, 0, "imf5.csv"))

    plot_print(fin_predict, smoothArr, raw)

def logic_type(raw):
    # residual stationary
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    # imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 3, 1, "high_frequence.csv"))
    # imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 2, 5, 5, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))

    fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 5, 3, "imf0.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 3, 1, "imf1.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 4, 2, "imf2.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[3], 1, 1, 0, "imf3.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[4], 2, 2, 4, "imf4.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[5], 1, 1, 1, "imf5.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[6], 3, 1, 0, "imf6.csv"))

    plot_print(fin_predict, smoothArr, raw)

def Input_type(raw):
    # residual stationary
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 4, 2, "high_frequence.csv"))
    imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 2, 5, 5, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))

    # fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 5, 4, "imf0.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 4, 2, "imf1.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 4, 2, "imf2.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[3], 1, 5, 1, "imf3.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[4], 0, 1, 0, "imf4.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[5], 0, 1, 0, "imf5.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[6], 0, 1, 0, "imf6.csv"))

    plot_print(fin_predict, smoothArr, raw)

def Design_type(raw):
    # residual stationary
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    # imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 2, 5, "high_frequence.csv"))
    # imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    # fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 1, 4, 4, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))

    fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 2, 4, "imf0.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 5, 2, "imf1.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 2, 7, "imf2.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[3], 0, 1, 0, "imf3.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[4], 0, 1, 0, "imf4.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[5], 2, 1, 0, "imf5.csv"))
    fin_predict = fin_predict.add(imf_arma(E_imfs[6], 0, 1, 0, "imf6.csv"))

    plot_print(fin_predict, smoothArr, raw)

def Configuration_type(raw):
    # residual stationary
    # S-G smoothing data to reduce noise
    smoothArr = scipy.signal.savgol_filter(raw, 11, 5)
    E_imfs = Signal(smoothArr)

    fin_predict = pd.Series(0, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))

    # forecast imf
    imf0 = pd.Series(E_imfs[0], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf1 = pd.Series(E_imfs[1], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf0.add(imf1), 0, 3, 5, "high_frequence.csv"))
    imf2 = pd.Series(E_imfs[2], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf3 = pd.Series(E_imfs[3], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf4 = pd.Series(E_imfs[4], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf5 = pd.Series(E_imfs[5], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    imf6 = pd.Series(E_imfs[6], index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    fin_predict = fin_predict.add(imf_arma(imf2.add(imf3).add(imf4).add(imf5).add(imf6), 2, 5, 5, "low_frequence.csv"))
    # residual fit
    residue = smoothArr - np.sum(E_imfs[:], axis=0)  # gain residual
    fin_predict = fin_predict.add(residual_arma(residue, 5, 0, "residual.csv"))

    # fin_predict = fin_predict.add(imf_arma(E_imfs[0], 0, 4, 4, "imf0.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[1], 0, 6, 9, "imf1.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[2], 0, 5, 6, "imf2.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[3], 0, 1, 0, "imf3.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[4], 2, 2, 4, "imf4.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[5], 2, 2, 1, "imf5.csv"))
    # fin_predict = fin_predict.add(imf_arma(E_imfs[6], 1, 1, 0, "imf6.csv"))

    plot_print(fin_predict, smoothArr, raw)

def plot_print(fin_predict, smoothArr, raw):

    Smooth = pd.Series(smoothArr, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    raw = pd.Series(raw, index=pd.date_range(start="2001-01-01", end="2021-12-01", freq="BMS"))
    plt.figure(figsize=(10, 8))
    plt.plot(Smooth.iloc[:], color='g', label='Smooth')
    plt.plot(pd.Series(raw).iloc[:], color='b', label='Actual')
    plt.plot(fin_predict.iloc[:], color='r', linestyle='--', label='predict')
    plt.xlabel('date')
    plt.ylabel('vulnerable numbers')
    plt.legend(loc='best')
    plt.show()

    print(np.sum(Smooth[-12:], axis=0))
    print(round(fin_predict[-12:]))

    print('Smooth_MAE: %.4f' % mean_absolute_error(raw[-12:], Smooth[-12:]))
    print('Smooth_MAPE: %.4f' % mean_absolute_percentage_error(raw[-12:], Smooth[-12:]))
    print('Smooth_R2: %.4f' % r2_score(raw[-12:], Smooth[-12:]))

    print('Smooth_pre_MAE: %.4f' % mean_absolute_error(Smooth[-12:], fin_predict[-12:]))
    print('Smooth_pre_MAPE: %.4f' % mean_absolute_percentage_error(Smooth[-12:], fin_predict[-12:]))
    print('Smooth_pre_R2: %.4f' % r2_score(Smooth[-12:], fin_predict[-12:]))

    print('MAE: %.4f'% mean_absolute_error(raw[-12:], fin_predict[-12:]))
    print('MAPE: %.4f' % mean_absolute_percentage_error(raw[-12:], fin_predict[-12:]))
    print('R2: %.4f'% r2_score(raw[-12:], fin_predict[-12:]))

if __name__ == "__main__":
    # initial_sequence()
    type_sequence()